@page "/personas"
@inject IToastService toast


<div class="container mt-3">
    <div class="card shadow-lg">
        <div class="card-header bg-dark">
            <div class="form-row">
                <div class="col-sm">
                    <h3 class="text-light"><i class="oi oi-person mr-3" />Personas</h3>
                </div>
                <div class="col-sm">
                    <button class="btn btn-dark border-light" @onclick="AgregarPersona">
                        <i class="oi oi-plus" />
                        Agregar
                    </button>
                </div>
                <div class="col-sm">
                    <select @bind="indexSelect" class="custom-select">
                        <option value="0">Filtrar por</option>
                        <option value="1">Id</option>
                        <option value="2">Nombre</option>
                    </select>
                </div>
                <div class="col-sm">
                    <input class="form-control w-100" type="@(indexSelect == 1 ? "number" : "text")" @bind="criterioDeBusqueda" />
                </div>
                <div class="col-sm text-center">
                    <button class="btn btn-dark border-light" @onclick="FiltarPersonas">
                        <i class="oi oi-magnifying-glass" />
                        Buscar
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (Personas == null || PersonasFiltrados == null) {
                <div>
                    <h4>Cargando...</h4>
                </div>
            } else {
                <table class="table table-hover">
                    <thead class="thead-light">
                        <tr>
                            <th>Persona Id</th>
                            <th>Nombres</th>
                            <th>Balance</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var persona in PersonasFiltrados) {
                            <tr>
                                <td>@persona.Id</td>
                                <td>@persona.Nombres</td>
                                <td>@string.Format("{0:c}" , persona.Balance)</td>
                                <td><button @onclick="()=>ModificarPersona(persona)" class="btn btn-outline-dark">Ver</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>



@if (MostraDialogoEditor) {
    Title = EsNuevoPersona ? "Nuevo Persona" : "Modificar Persona";

    <Dialogo Title="@Title" OnClose="OcultarDialogo">
        <Body>
            <EditForm id="form-personas" Model="personaEnModificacion" OnValidSubmit="Guardar">
                <FieldsPersona Persona="personaEnModificacion" />
                <DataAnnotationsValidator />
            </EditForm>
        </Body>
        <Footer>
            <button type="button" disabled="@(!EsNuevoPersona)" class="btn btn-warning" @onclick="Nuevo">Nuevo</button>
            <input type="submit" form="form-personas" class="btn btn-success" value="Guardar" />
            <button type="button" disabled="@(EsNuevoPersona)" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
        </Footer>
    </Dialogo>
}



@code {

    bool MostraDialogoEditor = false;
    bool EsNuevoPersona = false;
    string Title;

    int indexSelect = 0; //indice actual del select
    string criterioDeBusqueda;

    Persona personaEnModificacion = new Persona();

    public List<Persona> Personas { get; set; }
    public List<Persona> PersonasFiltrados { get; set; }

    protected async override Task OnInitializedAsync() {
        Personas = await PersonasBLL.GetPersonas();
        PersonasFiltrados = Personas;
    }

    void ModificarPersona(Persona persona) {
        personaEnModificacion = persona;
        EsNuevoPersona = false;
        MostraDialogoEditor = true;
    }

    void AgregarPersona() {
        personaEnModificacion = new Persona();
        EsNuevoPersona = true;
        MostraDialogoEditor = true;
    }

    async Task OcultarDialogo() {
        MostraDialogoEditor = false;
        Personas = await PersonasBLL.GetPersonas();
        QuitarFiltros();
    }

    void QuitarFiltros() {
        indexSelect = 0;
        criterioDeBusqueda = "";
        FiltarPersonas();
    }

    void Nuevo() {
        personaEnModificacion = new Persona();
    }
    async Task Guardar() {

        bool guardo;

        guardo = await PersonasBLL.Guardar(personaEnModificacion);

        if (guardo) {
            toast.ShowSuccess("Guardado ");
            Nuevo();
            await OcultarDialogo();
        } else
            toast.ShowError("Error al guardar");

    }

    async Task Eliminar() {
        bool eliminado;

        eliminado = await PersonasBLL.Eliminar(personaEnModificacion.Id);

        if (eliminado) {
            toast.ShowSuccess("Eliminado");
            Nuevo();
            await OcultarDialogo();
        } else
            toast.ShowError("Error al eliminar");
    }

    void FiltarPersonas() {

        if (indexSelect == 0) {//Todos

            PersonasFiltrados = Personas.Where(e => true).ToList();

        } else if (indexSelect == 1) {//Id

            if (int.TryParse(criterioDeBusqueda , out int Id)) {

                PersonasFiltrados = Personas.Where(e => e.Id == Id).ToList();
            }

        } else if (indexSelect == 2) {//Nombre

            PersonasFiltrados = Personas.Where(e => e.Nombres.ToLower().Contains(criterioDeBusqueda.ToLower())).ToList();

        }

    }



}